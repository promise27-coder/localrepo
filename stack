#include <iostream>
using namespace std;

class Stack {
    int top;
    int capacity;
    int* arr;

public:
    Stack(int size = 2) { // Default size is 2
        capacity = size;
        top = -1;
        arr = new int[capacity]; // Dynamically allocate memory for the stack
    }

    ~Stack() {
        delete[] arr; // Free the allocated memory
    }

    void push(int value) {
        if (top >= capacity - 1) {
            // Stack is full, we need to resize
            resize();
        }
        arr[++top] = value;
        cout << value << " pushed onto stack" << endl;
    }

    void pop() {
        if (top < 0) {
            cout << "Stack is underflow" << endl;
            return;
        }
        cout << arr[top--] << " popped from stack" << endl;
    }

    int peek() {
        if (top < 0) {
            cout << "Stack is empty" << endl;
            return -1; // Return an invalid value or handle it as needed
        }
        return arr[top];
    }

    bool isEmpty() {
        return top < 0;
    }

    bool isFull() {
        return top >= capacity - 1;
    }

private:
    void resize() {
        capacity *= 2; // Double the capacity
        int* newArr = new int[capacity]; // Allocate new array
        for (int i = 0; i <= top; i++) {
            newArr[i] = arr[i]; // Copy old elements to new array
        }
        delete[] arr; // Free the old array
        arr = newArr; // Point to the new array
        cout << "Stack resized to capacity: " << capacity << endl;
    }
};

int main() {
    Stack s;
    int choice, value;

    do {
        cout << "\nMenu:\n";
        cout << "1. Push\n";
        cout << "2. Pop\n";
        cout << "3. Peek\n";
        cout << "4. Check if Empty\n";
        cout << "5. Check if Full\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to push: ";
                cin >> value;
                s.push(value);
                break;
            case 2:
                s.pop();
                break;
            case 3:
                cout << "Top element is: " << s.peek() << endl;
                break;
            case 4:
                if (s.isEmpty()) {
                    cout << "Stack is empty." << endl;
                } else {
                    cout << "Stack is not empty." << endl;
                }
                break;
            case 5:
                if (s.isFull()) {
                    cout << "Stack is full." << endl;
                } else {
                    cout << "Stack is not full." << endl;
                }
                break;
            case 6:
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 6);

    return 0;
}
